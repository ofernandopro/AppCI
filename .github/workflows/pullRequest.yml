# name: Pull Request

# on:
#   pull_request:
#     branches:
#       - develop
#   workflow_dispatch:

# jobs:
#   test:
#     runs-on: macos-11
#     steps:
#       - uses: actions/checkout@v2

#       - name: Cancel Previous Runs
#         uses: styfle/cancel-workflow-action@0.9.1
#         with:
#           access_token: ${{ github.token }}

#       - uses: maxim-lobanov/setup-xcode@v1
#         with:
#           xcode-version: latest-stable

#       - uses: ruby/setup-ruby@v1

#       - name: Install Bundler
#         run: gem install bundler

#       - name: Install gems
#         run: bundle install

#       - name: Swift Packages Cache
#         uses: actions/cache@v2
#         id: cache
#         with:
#           path: |
#             Build/SourcePackages
#             Build/Build/Products
#           key: ${{ runner.os }}-deps-v1-${{ hashFiles('BILDsolid.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
#           restore-keys: ${{ runner.os }}-deps-v1-
      
#       - name: Run Tests (No Cache)
#         if: steps.setup.outputs.cache-hit != 'true'
#         run: bundle exec fastlane unit_test

#       - name: Run Tests (Cache)
#         if: steps.setup.outputs.cache-hit == 'true'
#         run: bundle exec fastlane unit_test skip_package_dependencies_resolution:true

name: Pull Request

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"